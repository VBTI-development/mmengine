name: merge_stage_test

on:
  push:
    paths-ignore:
      - ".github/**.md"
      - "docker/**"
      - "docs/**"
      - "README.md"
      - "README_zh-CN.md"
      - "CONTRIBUTING.md"
      - "CONTRIBUTING_zh-CN.md"
      - ".pre-commit-config.yaml"
      - ".pre-commit-config-zh-cn.yaml"
      - "examples/**"
    # branches:
    #   - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_cpu_py:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python-version: ['3.8', '3.10']
        torch: ['2.4.1']
        include:
          - torch: '2.4.1'
            torchvision: '0.19.1'
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Upgrade pip
        run: python -m pip install pip --upgrade
      - name: Install PyTorch
        run: pip install torch==${{matrix.torch}} torchvision==${{matrix.torchvision}} -f https://download.pytorch.org/whl/cpu/torch_stable.html
      - name: Build MMEngine from source
        run: pip install -e . -v
      - name: Install unit tests dependencies
        run: |
          pip install -r requirements/tests.txt
          pip install openmim
          mim install mmcv
      - name: Run unittests and generate coverage report
        run: |
          coverage run --branch --source mmengine -m pytest tests/  --ignore tests/test_dist
          coverage xml
          coverage report -m

  build_cpu_pt:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python-version: ['3.10']
        # torch: [1.6.0, 1.7.1, 1.8.1, 1.9.1, 1.10.1, 1.11.0, 1.12.0, 1.13.0, 2.0.0, 2.1.0]
        torch: [ 1.13.0+cpu, '2.0.0', '2.1.0', '2.3.1', '2.4.1', '2.5.1']
        include:
          - torch: 1.13.0+cpu
            torchvision: 0.14.0+cpu
            python-version: '3.7'
          - torch: '2.0.0'
            torchvision: '0.15.1'
            python-version: '3.8'
          - torch: '2.1.0'
            torchvision: '0.16.0'
            python-version: '3.8'
          - torch: '2.3.1'
            torchvision: '0.18.1'
          - torch: '2.4.1'
            torchvision: '0.19.1'
          - torch: '2.5.1'
            torchvision: '0.20.1'
        exclude:
          - torch: '1.13.0+cpu'
            python-version: '3.10'
          - torch: '2.0.0'
            python-version: '3.10'
          - torch: '2.1.0'
            python-version: '3.10'
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Upgrade pip
        run: python -m pip install pip --upgrade
      - name: Upgrade wheel
        run: python -m pip install wheel --upgrade
      - name: Install PyTorch
        run: pip install torch==${{matrix.torch}} torchvision==${{matrix.torchvision}} -f https://download.pytorch.org/whl/cpu/torch_stable.html
      - name: Build MMEngine from source
        run: pip install -e . -v
      - name: Install unit tests dependencies
        run: |
          pip install -r requirements/tests.txt
      - name: Install mmcv
        run: |
          pip install openmim
          mim install mmcv
        if: ${{ matrix.torch == '2.4.1' }}
      - name: Run unittests
        run: |
          pytest tests/  --ignore tests/test_dist

  # build_cu116:
  #   runs-on: ubuntu-22.04
  #   container:
  #     image: pytorch/pytorch:1.13.0-cuda11.6-cudnn8-devel
  #   strategy:
  #     matrix:
  #       python-version: ['3.7']
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Set up Python ${{ matrix.python-version }}
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #     - name: Upgrade pip
  #       run: pip install pip --upgrade
  #     - name: Fetch GPG keys
  #       run: |
  #         apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub
  #         apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/7fa2af80.pub
  #     - name: Install system dependencies
  #       run: apt-get update && apt-get install -y git ffmpeg libturbojpeg
  #     - name: Build MMEngine from source
  #       run: pip install -e . -v
  #     - name: Install unit tests dependencies
  #       run: |
  #         pip install -r requirements/tests.txt
  #         pip install openmim
  #         mim install mmcv
  #     # Distributed related unit test may randomly error in PyTorch 1.13.0
  #     - name: Run unittests
  #       run: |
  #         pytest tests/  --ignore tests/test_dist/

  build_cu124:
    runs-on: ubuntu-22.04
    container:
      # image: pytorch/pytorch:2.0.0-cuda11.7-cudnn8-devel
      image: pytorch/pytorch:2.4.1-cuda12.4-cudnn9-devel
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      matrix:
        python-version: ['3.10']
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Upgrade pip
        run: pip install pip --upgrade
      - name: Fetch GPG keys
        run: |
          apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub
          apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/7fa2af80.pub
      - name: Install system dependencies
        run: apt-get update && apt-get install -y git ffmpeg libturbojpeg
      - name: Build MMEngine from source
        run: pip install -e . -v
      - name: Install unit tests dependencies
        run: |
          pip install -r requirements/tests.txt
          pip install openmim
          mim install mmcv
      - name: Run unittests and generate coverage report
        run: |
          coverage run --branch --source mmengine -m pytest tests/  --ignore tests/test_dist/
          coverage xml
          coverage report -m

  # build_macos:
  #   runs-on: macos-latest
  #   strategy:
  #     matrix:
  #       python-version: [3.8]
  #       torch: [1.6.0, 1.8.1, 1.13.0]
  #       include:
  #         - torch: 1.6.0
  #           torchvision: 0.7.0
  #         - torch: 1.8.1
  #           torchvision: 0.9.1
  #         - torch: 1.13.0
  #           torchvision: 0.14.0
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Set up Python 3.7
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #     - name: Upgrade pip
  #       run: pip install pip --upgrade
  #     - name: Upgrade wheel
  #       run: pip install wheel --upgrade
  #     - name: Install PyTorch
  #       run: pip install torch==${{ matrix.torch }} torchvision==${{ matrix.torchvision }}
  #     - name: Build MMEngine from source
  #       run: pip install -e . -v
  #     - name: Install unit tests dependencies
  #       run: |
  #         pip install -r requirements/tests.txt
  #     - name: Install mmcv
  #       run: |
  #         pip install openmim
  #         mim install mmcv
  #       if: ${{ matrix.torch > '1.8.0' || matrix.torch == '1.8.0' }}
  #     # Distributed-related unit tests may fail in macOS
  #     # Skip testing setup_env since it does not work in the current CI environment # TODO
  #     - name: Run unittests and generate coverage report
  #       run: |
  #         coverage run --branch --source mmengine -m pytest tests/  --ignore tests/test_dist/ --ignore tests/test_utils/test_dl_utils/test_setup_env.py
  #         coverage xml
  #         coverage report -m

  # build_windows:
  #   runs-on: windows-2022
  #   strategy:
  #     matrix:
  #       python-version: ['3.7']
  #       platform: ['cpu', 'cu111']
  #       torch: ['1.8.1']
  #       torchvision: ['0.9.1']
  #       include:
  #         - python-version: '3.8'
  #           platform: 'cu118'
  #           torch: '2.1.0'
  #           torchvision: '0.16.0'
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Set up Python ${{ matrix.python-version }}
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #     - name: Upgrade pip
  #       # Windows CI could fail If we call `pip install pip --upgrade` directly.
  #       run: python -m pip install pip --upgrade
  #     - name: Install PyTorch
  #       run: pip install torch==${{matrix.torch}}+${{matrix.platform}} torchvision==${{matrix.torchvision}}+${{matrix.platform}} -f https://download.pytorch.org/whl/${{matrix.platform}}/torch_stable.html
  #     - name: Build MMEngine from source
  #       run: pip install -e . -v
  #     - name: Install unit tests dependencies
  #       run: |
  #         pip install -r requirements/tests.txt
  #         pip install openmim
  #         mim install mmcv
  #     - name: Run CPU unittests
  #       run: pytest tests/  --ignore tests/test_dist
  #       if: ${{ matrix.platform == 'cpu' }}
  #     - name: Run GPU unittests
  #       # Skip testing distributed related unit tests since the memory of windows CI is limited
  #       run: pytest tests/ --ignore tests/test_dist --ignore tests/test_optim/test_optimizer/test_optimizer_wrapper.py --ignore tests/test_model/test_wrappers/test_model_wrapper.py
  #       if: ${{ matrix.platform == 'cu111' }} || ${{ matrix.platform == 'cu118' }}
